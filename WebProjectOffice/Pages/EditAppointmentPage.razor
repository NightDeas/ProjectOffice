@using WebProjectOffice.Models
@inject DialogService DialogService

<RadzenTemplateForm TItem="Appointment" Data="@model" Submit=@OnSubmit>
    <div class="row" style="margin-bottom: 16px">
        <div class="col-md-3">
            <RadzenLabel Text="Text" />
        </div>
        <div class="col">
            <RadzenTextBox @bind-Value="@model.Text" Name="Text" />
            <RadzenRequiredValidator Text="Title is required" Component="Text" />
        </div>
    </div>
    <div class="row" style="margin-bottom: 16px">
        <div class="col-md-3">
            <RadzenLabel Text="Start" />
        </div>
        <div class="col">
            <RadzenDatePicker @bind-Value="@model.Start" Name="Start" ShowTime="true" />
            <RadzenRequiredValidator Text="Start is required" Component="Start" />
        </div>
    </div>
    <div class="row" style="margin-bottom: 16px">
        <div class="col-md-3">
            <RadzenLabel Text="End" />
        </div>
        <div class="col">
            <RadzenDatePicker Name="End" @bind-Value="@model.End" ShowTime="true" />
            <RadzenRequiredValidator Component="End" Text="End is required" />
        </div>
    </div>
    <div class="row">
        <div class="col-md-3"></div>
        <div class="col">
            <RadzenButton ButtonType="ButtonType.Submit" Text="Save" Click="@EditAppointment"/>
        </div>
    </div>
</RadzenTemplateForm>
@code {
    [Parameter]
    public Appointment Appointment { get; set; }

    Appointment model = new Appointment();

    protected override void OnParametersSet()
    {
        model = Appointment;
    }

    void OnSubmit(Appointment model)
    {
        DialogService.Close(model);
    }
    private async Task EditAppointment(MouseEventArgs e)
    {
        ProjectOffice.DataBase.Entities.Task task = await ProjectOfficeApi.Services.ApiService.GetTask(model.Id);
        ProjectOffice.Models.DTO.TaskModel taskModel = new()
            {
                Id = task.Id,
                CreatedTime = task.CreatedTime,
                FinishActualTime = task.FinishActualTime,
                FullTitle = model.Text,
                Deadline = model.End,
                DeletedTime = task.DeletedTime,
                Description = task.Description,
                ExecutiveEmployeedId = task.ExecutiveEmployeedId,
                IsDelete = task.IsDelete,
                PreviousTaskId = task.PreviousTaskId,
                ProjectId = task.ProjectId,
                ShortTitle = task.ShortTitle,
                StartActualTime = model.Start,
                StatusId = task.StatusId,
                UpdatedTime = task.UpdatedTime
            };
        await ProjectOfficeApi.Services.ApiService.PutTask(taskModel);
    }
}