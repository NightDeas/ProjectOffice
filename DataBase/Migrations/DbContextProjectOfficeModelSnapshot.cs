// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProjectOffice.DataBase.Entities;

#nullable disable

namespace ProjectOffice.DataBase.Migrations
{
    [DbContext(typeof(DbContextProjectOffice))]
    partial class DbContextProjectOfficeModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ProjectOffice.DataBase.Entities.Attachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NamePhoto")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<byte[]>("Photo")
                        .HasColumnType("image");

                    b.Property<double?>("SizeFile")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("ProjectOffice.DataBase.Entities.AttachmentsInTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AttachmentId")
                        .HasColumnType("int");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentId");

                    b.HasIndex("TaskId");

                    b.ToTable("AttachmentsInTask", (string)null);
                });

            modelBuilder.Entity("ProjectOffice.DataBase.Entities.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime>("CreatedTimeStamp")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedTimeStamp")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FirfstName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("LastEnterTimeStamp")
                        .HasColumnType("datetime");

                    b.Property<string>("LastName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Login")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Password")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdateTimeStamp")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("ProjectOffice.DataBase.Entities.GroupProject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("GroupProject", (string)null);
                });

            modelBuilder.Entity("ProjectOffice.DataBase.Entities.HistoryChangeStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ChangeTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.HasIndex("TaskId");

                    b.ToTable("HistoryChangeStatus", (string)null);
                });

            modelBuilder.Entity("ProjectOffice.DataBase.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("EmployeesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("ProjectOffice.DataBase.Entities.MessagesInTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MessageId")
                        .HasColumnType("int");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.HasIndex("TaskId");

                    b.ToTable("MessagesInTask", (string)null);
                });

            modelBuilder.Entity("ProjectOffice.DataBase.Entities.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("CreatorEmployeedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FinishScheduledDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FullTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Icon")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<Guid?>("ResponsibleEmployeedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ShortTitle")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("StartScheduledDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("ProjectOffice.DataBase.Entities.ProjectsInGroupProject", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("GroupProjectId")
                        .HasColumnType("int");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GroupProjectId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectsInGroupProject", (string)null);
                });

            modelBuilder.Entity("ProjectOffice.DataBase.Entities.Task", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Deadline")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ExecutiveEmployeedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("FinishActualTime")
                        .HasColumnType("datetime");

                    b.Property<string>("FullTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<Guid?>("PreviousTaskId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ShortTitle")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("StartActualTime")
                        .HasColumnType("datetime");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ExecutiveEmployeedId");

                    b.HasIndex("PreviousTaskId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("StatusId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("ProjectOffice.DataBase.Entities.TaskObserveEmployee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("EmployeesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EmployeesId");

                    b.HasIndex("TaskId");

                    b.ToTable("TaskObserveEmployees");
                });

            modelBuilder.Entity("ProjectOffice.DataBase.Entities.TaskStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ColorHex")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TaskStatuses");
                });

            modelBuilder.Entity("ProjectOffice.DataBase.Entities.AttachmentsInTask", b =>
                {
                    b.HasOne("ProjectOffice.DataBase.Entities.Attachment", "Attachment")
                        .WithMany("AttachmentsInTasks")
                        .HasForeignKey("AttachmentId")
                        .IsRequired()
                        .HasConstraintName("FK_AttachmentsInTask_Attachments");

                    b.HasOne("ProjectOffice.DataBase.Entities.Task", "Task")
                        .WithMany("AttachmentsInTasks")
                        .HasForeignKey("TaskId")
                        .IsRequired()
                        .HasConstraintName("FK_AttachmentsInTask_Tasks");

                    b.Navigation("Attachment");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("ProjectOffice.DataBase.Entities.HistoryChangeStatus", b =>
                {
                    b.HasOne("ProjectOffice.DataBase.Entities.TaskStatus", "Status")
                        .WithMany("HistoryChangeStatuses")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("FK_HistoryChangeStatus_TaskStatuses");

                    b.HasOne("ProjectOffice.DataBase.Entities.Task", "Task")
                        .WithMany("HistoryChangeStatuses")
                        .HasForeignKey("TaskId")
                        .IsRequired()
                        .HasConstraintName("FK_HistoryChangeStatus_Tasks");

                    b.Navigation("Status");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("ProjectOffice.DataBase.Entities.MessagesInTask", b =>
                {
                    b.HasOne("ProjectOffice.DataBase.Entities.Message", "Message")
                        .WithMany("MessagesInTasks")
                        .HasForeignKey("MessageId")
                        .IsRequired()
                        .HasConstraintName("FK_MessagesInTask_Messages");

                    b.HasOne("ProjectOffice.DataBase.Entities.Task", "Task")
                        .WithMany("MessagesInTasks")
                        .HasForeignKey("TaskId")
                        .IsRequired()
                        .HasConstraintName("FK_MessagesInTask_Tasks");

                    b.Navigation("Message");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("ProjectOffice.DataBase.Entities.ProjectsInGroupProject", b =>
                {
                    b.HasOne("ProjectOffice.DataBase.Entities.GroupProject", "GroupProject")
                        .WithMany("ProjectsInGroupProjects")
                        .HasForeignKey("GroupProjectId")
                        .IsRequired()
                        .HasConstraintName("FK_ProjectsInGroupProject_GroupProject");

                    b.HasOne("ProjectOffice.DataBase.Entities.Project", "Project")
                        .WithMany("ProjectsInGroupProjects")
                        .HasForeignKey("ProjectId")
                        .IsRequired()
                        .HasConstraintName("FK_ProjectsInGroupProject_Projects");

                    b.Navigation("GroupProject");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ProjectOffice.DataBase.Entities.Task", b =>
                {
                    b.HasOne("ProjectOffice.DataBase.Entities.Employee", "ExecutiveEmployeed")
                        .WithMany("Tasks")
                        .HasForeignKey("ExecutiveEmployeedId")
                        .IsRequired()
                        .HasConstraintName("FK_Tasks_Employees");

                    b.HasOne("ProjectOffice.DataBase.Entities.Task", "PreviousTask")
                        .WithMany("InversePreviousTask")
                        .HasForeignKey("PreviousTaskId")
                        .HasConstraintName("FK_Tasks_Tasks");

                    b.HasOne("ProjectOffice.DataBase.Entities.Project", "Project")
                        .WithMany("Tasks")
                        .HasForeignKey("ProjectId")
                        .IsRequired()
                        .HasConstraintName("FK_Tasks_Projects");

                    b.HasOne("ProjectOffice.DataBase.Entities.TaskStatus", "Status")
                        .WithMany("Tasks")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("FK_Tasks_TaskStatuses");

                    b.Navigation("ExecutiveEmployeed");

                    b.Navigation("PreviousTask");

                    b.Navigation("Project");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("ProjectOffice.DataBase.Entities.TaskObserveEmployee", b =>
                {
                    b.HasOne("ProjectOffice.DataBase.Entities.Employee", "Employees")
                        .WithMany("TaskObserveEmployees")
                        .HasForeignKey("EmployeesId")
                        .IsRequired()
                        .HasConstraintName("FK_TaskObserveEmployees_Employees");

                    b.HasOne("ProjectOffice.DataBase.Entities.Task", "Task")
                        .WithMany("TaskObserveEmployees")
                        .HasForeignKey("TaskId")
                        .IsRequired()
                        .HasConstraintName("FK_TaskObserveEmployees_Tasks");

                    b.Navigation("Employees");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("ProjectOffice.DataBase.Entities.Attachment", b =>
                {
                    b.Navigation("AttachmentsInTasks");
                });

            modelBuilder.Entity("ProjectOffice.DataBase.Entities.Employee", b =>
                {
                    b.Navigation("TaskObserveEmployees");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("ProjectOffice.DataBase.Entities.GroupProject", b =>
                {
                    b.Navigation("ProjectsInGroupProjects");
                });

            modelBuilder.Entity("ProjectOffice.DataBase.Entities.Message", b =>
                {
                    b.Navigation("MessagesInTasks");
                });

            modelBuilder.Entity("ProjectOffice.DataBase.Entities.Project", b =>
                {
                    b.Navigation("ProjectsInGroupProjects");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("ProjectOffice.DataBase.Entities.Task", b =>
                {
                    b.Navigation("AttachmentsInTasks");

                    b.Navigation("HistoryChangeStatuses");

                    b.Navigation("InversePreviousTask");

                    b.Navigation("MessagesInTasks");

                    b.Navigation("TaskObserveEmployees");
                });

            modelBuilder.Entity("ProjectOffice.DataBase.Entities.TaskStatus", b =>
                {
                    b.Navigation("HistoryChangeStatuses");

                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
